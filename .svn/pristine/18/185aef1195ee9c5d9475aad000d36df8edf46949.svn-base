using Acr.UserDialogs;
using LinphoneXamarin.components.userControllers;
using LinphoneXamarin.Entities;
using LinphoneXamarin.Services;
using LinphoneXamarin.Util;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Input;
using Xamarin.Essentials;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace LinphoneXamarin.components
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class RootPage : ContentPage, IMissedCounterListener, CallViewInitiater, ICollabAlertListener
    {
        public ICommand SelectPresenceCommand { get; private set; }
        SpeedDialComponent speedDialComponent;

        CancellationTokenSource cancelToken;
        public RootPage()
        {
            addLog("RootPage()");
            InitializeComponent();
            CallService.Instance.callViewInitiater = this;
            AeonixInfoService.Instance.collabAlertListener = this;
            CallService.Instance.componentCallsListener1 = _CallListView;
            AeonixInfoService.Instance.uIInfoListener1 = _CallListView;
            LoginService.Instance.loginRegistrationUiListener1 = _CallListView;

            BindingContext = this;
            NavigationPage.SetHasNavigationBar(this, false);
            speedDialComponent = new SpeedDialComponent();
            speedDialComponent.visibiltyCommand = new Command<bool>(onActionComponentVisibilityChanged);
            speedDialComponent.HorizontalOptions = LayoutOptions.FillAndExpand;
            if (MyFileSystem.Instance.loadSettings().isActionComponentVisble)
                onActionComponentVisibilityChanged(true);

            tabHandler(0, true);
            topBarComponent.SelectPresenceCommand = new Command<object>(onChangePresence);
            topBarComponent.SearchCommand = new Command<object>(goToSearch);
            myPresenceComponent.SelectedCommand = new Command<object>(onSelectedPresence);
            MessagesService.Instance.missedCounterListener = this;
            CallLogService.Instance.missedCounterListener = this;
        }

        protected override void OnAppearing()
        {
            addLog("OnAppearing RootPage page");
            base.OnAppearing();
        }

        protected override void OnDisappearing()
        {
            addLog("OnDisappearing RootPage page");
            base.OnDisappearing();
        }

        public void onInitiateCallView()
        {
            addLog("onInitiateCallView");

            if (!SharedData.Instance.isCallView)
            {
                addLog("goToCallView");
                var page = (Page)new MainPage();
                SharedData.Instance.isCallView = true;
                Navigation.PushAsync(page, false);
                MyAudioManager.Instance.setAudioState(MYAudioState.BT, false);

#if __IOS__
                AppDelegate.screenHandler(true);  
#elif WINDOWS_UWP
                Windows.UI.Xaml.Window.Current.Content.KeyDown += Window_KeyDown;
#endif

            }
        }

        [MethodImpl(MethodImplOptions.Synchronized)]
        public void onDestroyCallView()
        {
            addLog("onDestroyCallView()");
            var sd = SharedData.Instance;
            if (((App)App.Current).isForeground)
            {
                if (sd.isCallView)
                {
                    addLog("removing call view from foreground");
                    Navigation.PopAsync(false);
                }

            }
            else
            {
                addLog("removing call view from background");
                Navigation.PopToRootAsync(false);
            }
            sd.isCallView = false;
            AeonixInfoService.Instance.getCallLogs();
            MyAudioManager myAudioManager = MyAudioManager.Instance;
            myAudioManager.setAudioState(MYAudioState.DEFAULT, false);
            myAudioManager.setCommunicationMode(AudioMode.DEFAULT);

#if __IOS__
            Console.WriteLine("omer928:destroyApp() "+ SharedData.Instance.isVoipSession);
            AppDelegate.screenHandler(false);
            if(SharedData.Instance.isVoipSession){
            Console.WriteLine("omer928:destroyApp()");
                AppDelegate.destroyApp();
            }

#elif WINDOWS_UWP
            try
            {
                Windows.UI.Xaml.Window.Current.Content.KeyDown -= Window_KeyDown;
            }
            catch (Exception e)
            {
                addLog("test:" + e.ToString());
            }
#endif
        }

        void goToSearch(object obj)
        {
            Navigation.PushAsync(new searchPage());
        }

        void onChangePresence(object obj)
        {
            addLog("onChangePresence");
            myPresenceComponent.IsVisible = !myPresenceComponent.IsVisible;

        }
        void onSelectedPresence(object obj)
        {
            addLog("onSelectedPresence");
            myPresenceComponent.IsVisible = !myPresenceComponent.IsVisible;
        }

        private void onFavClicked(object sender, EventArgs e)
        {
            tabHandler(0);
        }

        private void onRecentClicked(object sender, EventArgs e)
        {
            tabHandler(1);
        }
        private void onChatClicked(object sender, EventArgs e)
        {
            tabHandler(2);
        }
        private void onMoreClicked(object sender, EventArgs e)
        {
            tabHandler(4);
        }
        private void onDialClicked(object sender, EventArgs e)
        {
            tabHandler(3);
        }

        private void addLog(string message)
        {
            MyFileSystem.Instance.writeDebug(message, "Favorites");
            Console.WriteLine($"omer56: {message}");
        }

        private void onActionComponentVisibilityChanged(bool isVisible)
        {
            addLog($"onActionComponentVisibilityChanged(),isVisible: {isVisible}");
            if (isVisible)
                rootContainer.Children.Insert(1, speedDialComponent);
            else
                rootContainer.Children.RemoveAt(1);
        }

        private void tabHandler(int newTabIndex, bool force = false)
        {
            var tabIndex = SharedData.Instance.tabIndex;
            if (!force && tabIndex == newTabIndex) return;
            var color = Color.FromRgb(0, 145, 211);
            switch (newTabIndex)
            {
                case 0:
                    SharedData.Instance.tabIndex = newTabIndex;
                    resetAllTabs();
                    _DialComponent.IsVisible = false;
                    favLbl.TextColor = color;
                    favTab.Source = "favtab_active.png";
                    listcontainer.Children.Clear();
                    var favotireComponent = new FavotireComponent();
                    favotireComponent.VerticalOptions = LayoutOptions.FillAndExpand;
                    listcontainer.Children.Add(favotireComponent);
                    break;
                case 1:
                    SharedData.Instance.tabIndex = newTabIndex;
                    resetAllTabs();
                    _DialComponent.IsVisible = false;
                    recentLbl.TextColor = color;
                    recentTab.Source = "recenttab_active.png";
                    listcontainer.Children.Clear();
                    var recentComponent = new RecentComponent();
                    recentComponent.VerticalOptions = LayoutOptions.FillAndExpand;
                    listcontainer.Children.Add(recentComponent);
                    AeonixInfoService.Instance.sendDismissMissedCalls();
                    CallLogService.Instance.setMissedCounter(0);

                    break;
                case 2:
                    SharedData.Instance.tabIndex = newTabIndex;
                    resetAllTabs();
                    _DialComponent.IsVisible = false;
                    chatLbl.TextColor = color;
                    ChatTab.Source = "chattab_active.png";
                    listcontainer.Children.Clear();
                    var chatComponent = new ChatComponent();
                    chatComponent.VerticalOptions = LayoutOptions.FillAndExpand;
                    listcontainer.Children.Add(chatComponent);
                    break;
                case 3:
                    SharedData.Instance.tabIndex = newTabIndex;
                    resetAllTabs();
                    dialLbl.TextColor = color;
                    DialPadTab.Source = "dialpadtab_active.png";
                    _DialComponent.IsVisible = true;
                    // Navigation.PushAsync(new DialPad());
                    break;
                case 4:
                    Navigation.PushAsync(new MorePage());
                    break;
            }
        }

        private void resetAllTabs()
        {
            var color = Color.FromRgb(150, 177, 191);
            favTab.Source = "favtab.png";
            favLbl.TextColor = color;

            recentTab.Source = "recenttab.png";
            recentLbl.TextColor = color;

            ChatTab.Source = "chattab.png";
            chatLbl.TextColor = color;

            DialPadTab.Source = "dialpadtab.png";
            dialLbl.TextColor = color;

            moreLbl.TextColor = color;
        }

        public void onMessageCounterchanged(int counter)
        {
            addLog($"onMessageCounterchanged() {counter}");
            MainThread.BeginInvokeOnMainThread(() =>
            {
                if (counter > 0)
                {
                    chatCounter1.IsVisible = true;
                    chatCounter2.IsVisible = true;
                    chatCounter2.Text = counter.ToString();
                }
                else
                {
                    chatCounter1.IsVisible = false;
                    chatCounter2.IsVisible = false;
                }

            });
        }

        public void onCallCounterchanged(int counter)
        {
            addLog($"onCallCounterchanged, counter: {counter}");
            MainThread.BeginInvokeOnMainThread(() =>
            {
                if (counter > 0 && SharedData.Instance.tabIndex != 1)
                {
                    recentCounter1.IsVisible = true;
                    recentCounter2.IsVisible = true;
                    recentCounter2.Text = counter.ToString();
                }
                else
                {
                    recentCounter1.IsVisible = false;
                    recentCounter2.IsVisible = false;
                }
            });
        }

        public void onVMCounterChanged(int counter)
        {
            addLog($"onCallCounterchanged, counter: {counter}");
            MainThread.BeginInvokeOnMainThread(() =>
            {


            });
        }

        public async Task DisplayCollabAlert(string title, string message)
        {
            cancelToken = new CancellationTokenSource();
            MyAudioManager.Instance.playFile("notification_sound.mp3");
            bool answer = await UserDialogs.Instance.ConfirmAsync(title, message, (string)Application.Current.Resources["yes"], (string)Application.Current.Resources["no"], cancelToken.Token);
            AeonixInfoService.Instance.sendCollaborationOfferStatus(answer ? "ACCEPTED" : "REJECTED");

        }

        public void CancelCollabAlert()
        {
            cancelToken?.Cancel();
        }
    }
}