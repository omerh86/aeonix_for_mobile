using LinphoneXamarin.Entities;
using LinphoneXamarin.Util;
using SQLite;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace LinphoneXamarin.Services
{
    public sealed class messageDBRepository
    {
        private static messageDBRepository instance = null;
        private static readonly object padlock = new object();

        private SQLiteConnection conn;

        public static messageDBRepository Instance
        {
            get
            {
                lock (padlock)
                {
                    if (instance == null)
                    {
                        var path = "";
#if WINDOWS_UWP
                        path = Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\SQLite.db3";
#else
                        path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "SQLite.db3");
#endif
                        instance = new messageDBRepository(path);
                    }
                    return instance;
                }
            }
        }

        public messageDBRepository(string dbPath)
        {
            var databasePath = "";
#if WINDOWS_UWP
            databasePath = Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\MyDB.db";
#else
            databasePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "MyDB.db");
#endif

            conn = new SQLiteConnection(databasePath);
            conn.CreateTable<MyChat>();
            conn.CreateTable<MyMessage>();
            conn.CreateIndex("idx_chatId", "MyMessage", "chatId");

        }

        public void resetTables()
        {
            conn.DropTable<MyChat>();
            conn.DropTable<MyMessage>();
            conn.CreateTable<MyChat>();
            conn.CreateTable<MyMessage>();
        }

        //Merav
        public List<MyChat> getAllChats()
        {
            return conn.Query<MyChat>("select * from MyChat order by lastMessageTime DESC");
        }

        //Merav 
        public MyChat getChatByChatId(string chatId)
        {
            if (chatId != null)
                return conn.Table<MyChat>().Where(i => i.chatId.Equals(chatId)).FirstOrDefault();
            else
                return null;
        }

        private void clearChatUnredmessageCounter(string chatId)
        {
            addLog("clearChatUnredmessageCounter()");
            object[] args = new object[2] { 0, chatId };
            conn.Query<MyMessage>("UPDATE MyChat SET unRedMessages =? WHERE chatId =? ", args);
        }

        //Merav
        private void setChat(MyChat myChatItem)
        {
            if (myChatItem != null)
            {
                var i = getChatByChatId(myChatItem.chatId);
                int unRedMessage = countAllUnRedMessagesByChatId(myChatItem.chatId);
                addLog("countAllUnRedMessagesByChatId(): count is: " + unRedMessage);
                myChatItem.unRedMessages = unRedMessage;
                if (i != null)
                    conn.Update(myChatItem);
                else
                    conn.Insert(myChatItem);
            }
        }


        private void deleteChat(string chatId)
        {
            conn.Query<MyChat>("delete from MyChat where chatId = ?", chatId);
        }

        public List<MyMessage> getAllMessagesByChatId(string chatId)
        {
            //  return conn.Table<MyMessage>().Where(i => i.chatId == chatId).ToList();
            addLog("getAllMessagesByChatId(): " + chatId);
            return conn.Query<MyMessage>("select * from MyMessage where chatId = ?", chatId, " order by messageTime DESC");
        }

        public MyMessage getMessageByMessageId(string messageId)
        {
            return conn.Table<MyMessage>().Where(i => i.messageId.Equals(messageId)).FirstOrDefault();
        }

        public void updateMessage(MyMessage message)
        {
            addLog("updateMessage(): " + message.messageId);
            conn.Update(message);
            MyChat myChatItem = getChatByChatId(message.chatId);
            if (myChatItem != null)
            {
                setChat(myChatItem);
            }
        }

        //Merav
        public void addMessage(MyMessage message, string chatName, ChatType chatType)
        {
            addLog("addMessage(): " + message.messageId);
            MyChat myChatItem = null;
            //Add the message to the MyMessage DB and to MyChat DB
            conn.Insert(message);
            myChatItem = getChatByChatId(message.chatId);
            //If the latest message already read - the unRedMessage counter should be 0
            //If the latest message not red yet - the unRedMessage counter should increment
            if (myChatItem != null)
            {
                myChatItem.chatName = chatName;
                if (message.messageTime.Equals(myChatItem.lastMessageTime))
                {
                    //Same message as in the chat - just update UnRedMessage counter
                    //                if (message.isRedMessage)
                    //                {
                    //                    myChatItem.unRedMessages = 0;
                    setChat(myChatItem);
                    //                }
                }
                else
                {
                    //Not the same message as the message in the chat
                    if (myChatItem.lastMessageTime < message.messageTime)
                    {
                        //The message is newer that the message in the chat, update the chat with the latest message
                        //                   int unRedMessages = 0;
                        //                   if (message.isRedMessage == false)
                        //                        unRedMessages = myChatItem.unRedMessages + 1;
                        setChat(new MyChat(message.chatId, myChatItem.chatName, message.messageText, message.messageTime, myChatItem.chatType));
                    }
                }
            }
            else
            {
                //The chat is not exist - This is the 1st message of the chat - should create new chat
                //            int unRedMessages = 0;
                //            if (message.isRedMessage == false)
                //                unRedMessages = 1;
                setChat(new MyChat(message.chatId, chatName, message.messageText, message.messageTime, chatType));
            }


        }

        //Merav
        private MyMessage getLatestMessageByChatId(string chatId)
        {
            List<MyMessage> messageList = getAllMessagesByChatId(chatId);
            if ((messageList == null) || (messageList.Count == 0))
                return null;
            else
            {
                return (MyMessage)messageList[messageList.Count - 1];
            }
        }

        //Merav
        public void DeleteMessageItem(MyMessage message, string chatName, ChatType chatType)
        {
            conn.Query<MyMessage>("delete from MyMessage where messageId = ?", message.messageId);

            MyMessage latestMessage = getLatestMessageByChatId(message.chatId);
            if (latestMessage == null)
                deleteChat(message.chatId); //The chatId is empty thus remove the chatId record from table
            else
            {
                MyChat myChatItem = getChatByChatId(message.chatId);
                if (myChatItem != null)
                {
                    myChatItem.lastMessageText = latestMessage.messageText;
                    myChatItem.lastMessageTime = latestMessage.messageTime;
                    setChat(myChatItem);
                }
                else
                    setChat(new MyChat(latestMessage.chatId, chatName, latestMessage.messageText, latestMessage.messageTime, chatType));
                //If the latest message already read - the unRedMessage counter should be 0
                //If the latest message not red yet - the unRedMessage counter should increment
                /*                int unRedMessages = 0;
                                if (message.isRedMessage == false)
                                {
                                    if (myChatItem != null)
                                        unRedMessages = myChatItem.unRedMessages - 1;
                                }
                                else
                                {
                                    if (myChatItem != null)
                                        unRedMessages = myChatItem.unRedMessages;
                                    else if (latestMessage.isRedMessage == false)
                                        unRedMessages = 1;
                                }*/

            }
        }

        private int countAllUnRedMessagesByChatId(string chatId)
        {
            object[] args = new object[3] { chatId, false, false };
            var num = conn.Query<MyMessage>("select * from MyMessage where chatId =? and isRedMessage = ? and isMine= ? ", args);

            if (num != null)
                return num.Count;
            else
                return 0;
        }

        public int countAllUnRedMessages()
        {
            try
            {
                object[] args = new object[2] { false, false };
                var num = conn.Query<MyMessage>("SELECT * FROM MyMessage WHERE isRedMessage = ? and isMine= ? ", args);

                if (num != null)
                    return num.Count;
                else
                    return 0;
            }
            catch (Exception e)
            {
                addLog(e.ToString());
                return 0;
            }
        }

        //public void setAllMessagesAsRed(String chatId)
        //{
        //    //  conn.Query<MyMessage>("update MyMessage isRedMessage =?", true, " where chatId =? ", chatId);
        //    conn.Query<MyMessage>("UPDATE MyMessage SET isRedMessage ='true' WHERE chatId =? ", chatId);
        //    clearChatUnredmessageCounter(chatId);
        //}

        public void setAllMessagesAsRed(String chatId)
        {
            object[] args = new object[3] { true, chatId, false };
            //  conn.Query<MyMessage>("update MyMessage isRedMessage =?", true, " where chatId =? ", chatId);
            conn.Query<MyMessage>("UPDATE MyMessage SET isRedMessage = ? WHERE chatId = ? and isMine= ? ", args);
            clearChatUnredmessageCounter(chatId);
        }

        private void addLog(string message)
        {
            MyFileSystem.Instance.writeDebug(message, "message_DB_Repo");
            Console.WriteLine("omer:252 " + message);
        }

        public void deleteAllChatMessages(string chatId)
        {
            try
            {
                addLog("deleteAllChatMessages(), chatid is " + chatId);
                conn.Query<MyMessage>("DELETE FROM MyMessage WHERE chatId = ?", chatId);
                this.deleteChat(chatId);
            }
            catch (Exception e)
            {
                addLog(e.ToString());
            }
        }

    }
}
