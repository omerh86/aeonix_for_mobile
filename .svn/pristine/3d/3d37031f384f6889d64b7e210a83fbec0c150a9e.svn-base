#if __IOS__
using System;
using CoreFoundation;
using Foundation;
using LinphoneXamarin.Services;

namespace LinphoneXamarin.MyCallKit
{
    public class ActiveCall
    {
#region Private Variables
        private bool isConnecting;
        private bool isConnected;
        private bool _isOnhold;
        private bool _isMute;
#endregion

#region Computed Properties
        public NSUuid UUID { get; set; }
      
        public bool isVideo { get; set; }
        public string Handle { get; set; }
        public DateTime StartedConnectingOn { get; set; }
        public DateTime ConnectedOn { get; set; }
        public DateTime EndedOn { get; set; }

        public bool IsConnecting
        {
            get { return isConnecting; }
            set
            {
                isConnecting = value;
                if (isConnecting) StartedConnectingOn = DateTime.Now;
                RaiseStartingConnectionChanged();
            }
        }

        public bool IsConnected
        {
            get { return isConnected; }
            set
            {
                isConnected = value;
                if (isConnected)
                {
                    ConnectedOn = DateTime.Now;
                }
                else
                {
                    EndedOn = DateTime.Now;
                }
                RaiseConnectedChanged();
            }
        }

        public bool IsOnHold
        {
            get { return _isOnhold; }
            set
            {
                _isOnhold = value;
               // CallService.Instance.toggleHoldByUUid(UUID);
            }
        }

        public bool IsMute
        {
            get { return _isMute; }
            set
            {
                _isMute = value;
                CallService.Instance.toggleMuteByUUid(UUID);
            }
        }

#endregion

#region Constructors
        public ActiveCall()
        {
        }
            

        public ActiveCall(NSUuid uuid, string handle, bool isVideo)
        {
            // Initialize
            this.UUID = uuid;
            this.Handle = handle;
            this.isVideo = isVideo;
            CallService.Instance.setCallkitUuid(uuid);
        }
#endregion

#region Public Methods
        public void StartCall(ActiveCallbackDelegate completionHandler)
        {
           completionHandler(true);
        }

        public void AnswerCall(ActiveCallbackDelegate completionHandler,bool isVideo)
        {
            // Simulate the call being answered
            CallService.Instance.answerCallByUUid(UUID, isVideo);
           
          IsConnected = true;
            completionHandler(true);
        }

        public void EndCall(ActiveCallbackDelegate completionHandler)
        {
            // Simulate the call ending
           CallService.Instance.terminateCallByUUid(UUID);
            IsConnected = false;
            completionHandler(true);
        }
#endregion

#region Events
        public delegate void ActiveCallbackDelegate(bool successful);
        public delegate void ActiveCallStateChangedDelegate(ActiveCall call);

        public event ActiveCallStateChangedDelegate StartingConnectionChanged;
        internal void RaiseStartingConnectionChanged()
        {
            if (this.StartingConnectionChanged != null) this.StartingConnectionChanged(this);
        }

        public event ActiveCallStateChangedDelegate ConnectedChanged;
        internal void RaiseConnectedChanged()
        {
            if (this.ConnectedChanged != null) this.ConnectedChanged(this);
        }
#endregion
    }
}
#endif