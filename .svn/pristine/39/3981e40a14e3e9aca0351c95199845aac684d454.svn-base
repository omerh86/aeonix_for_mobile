using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Org.Linphone.Mediastream {

	// Metadata.xml XPath class reference: path="/api/package[@name='org.linphone.mediastream']/class[@name='Log']"
	[global::Android.Runtime.Register ("org/linphone/mediastream/Log", DoNotGenerateAcw=true)]
	public sealed partial class Log : global::Java.Lang.Object {

		internal    new     static  readonly    JniPeerMembers  _members    = new XAPeerMembers ("org/linphone/mediastream/Log", typeof (Log));
		internal static new IntPtr class_ref {
			get {
				return _members.JniPeerType.PeerReference.Handle;
			}
		}

		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal Log (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer) {}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='org.linphone.mediastream']/class[@name='Log']/constructor[@name='Log' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='boolean']]"
		[Register (".ctor", "(Ljava/lang/String;Z)V", "")]
		[Obsolete (@"deprecated")]
		public unsafe Log (string p0, bool p1)
			: base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;Z)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_p0 = JNIEnv.NewString (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.linphone.mediastream']/class[@name='Log']/method[@name='d' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("d", "([Ljava/lang/Object;)V", "")]
		public static unsafe void D (params global::Java.Lang.Object[] p0)
		{
			const string __id = "d.([Ljava/lang/Object;)V";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.linphone.mediastream']/class[@name='Log']/method[@name='e' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("e", "([Ljava/lang/Object;)V", "")]
		public static unsafe void E (params global::Java.Lang.Object[] p0)
		{
			const string __id = "e.([Ljava/lang/Object;)V";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.linphone.mediastream']/class[@name='Log']/method[@name='i' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("i", "([Ljava/lang/Object;)V", "")]
		public static unsafe void I (params global::Java.Lang.Object[] p0)
		{
			const string __id = "i.([Ljava/lang/Object;)V";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.linphone.mediastream']/class[@name='Log']/method[@name='w' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("w", "([Ljava/lang/Object;)V", "")]
		public static unsafe void W (params global::Java.Lang.Object[] p0)
		{
			const string __id = "w.([Ljava/lang/Object;)V";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
			}
		}

	}
}
