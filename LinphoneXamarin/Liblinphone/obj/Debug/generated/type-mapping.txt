org/linphone/core/tutorials/TutorialBuddyStatus = Org.Linphone.Core.Tutorials.TutorialBuddyStatus
  <init>()V = .ctor()
  <init>(Lorg/linphone/core/tutorials/TutorialNotifier;)V = .ctor(Org.Linphone.Core.Tutorials.TutorialNotifier)
  launchTutorial(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = LaunchTutorial(string, string, string)
  main([Ljava/lang/String;)V = Main(string[])
  stopMainLoop()V = StopMainLoop()
org/linphone/core/tutorials/TutorialChatRoom = Org.Linphone.Core.Tutorials.TutorialChatRoom
  <init>()V = .ctor()
  <init>(Lorg/linphone/core/tutorials/TutorialNotifier;)V = .ctor(Org.Linphone.Core.Tutorials.TutorialNotifier)
  launchTutorial(Ljava/lang/String;)V = LaunchTutorial(string)
  main([Ljava/lang/String;)V = Main(string[])
  stopMainLoop()V = StopMainLoop()
org/linphone/core/tutorials/TutorialHelloWorld = Org.Linphone.Core.Tutorials.TutorialHelloWorld
  <init>()V = .ctor()
  <init>(Lorg/linphone/core/tutorials/TutorialNotifier;)V = .ctor(Org.Linphone.Core.Tutorials.TutorialNotifier)
  launchTutorial(Ljava/lang/String;)V = LaunchTutorial(string)
  main([Ljava/lang/String;)V = Main(string[])
  stopMainLoop()V = StopMainLoop()
org/linphone/core/tutorials/TutorialNotifier = Org.Linphone.Core.Tutorials.TutorialNotifier
  <init>()V = .ctor()
  notify(Ljava/lang/String;)V = Notify(string)
org/linphone/core/tutorials/TutorialRegistration = Org.Linphone.Core.Tutorials.TutorialRegistration
  <init>()V = .ctor()
  <init>(Lorg/linphone/core/tutorials/TutorialNotifier;)V = .ctor(Org.Linphone.Core.Tutorials.TutorialNotifier)
  launchTutorial(Ljava/lang/String;Ljava/lang/String;)V = LaunchTutorial(string, string)
  main([Ljava/lang/String;)V = Main(string[])
  stopMainLoop()V = StopMainLoop()
org/linphone/core/util/AndroidPlatformHelper = Org.Linphone.Core.Util.AndroidPlatformHelper
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
  getPowerManager()Ljava/lang/Object; = PowerManager
  acquireCpuLock()V = AcquireCpuLock()
  acquireMcastLock()V = AcquireMcastLock()
  acquireWifiLock()V = AcquireWifiLock()
  getDnsServers()[Ljava/lang/String; = GetDnsServers()
  releaseCpuLock()V = ReleaseCpuLock()
  releaseMcastLock()V = ReleaseMcastLock()
  releaseWifiLock()V = ReleaseWifiLock()
org/linphone/mediastream/AACFilter = Org.Linphone.Mediastream.AACFilter
  <init>()V = .ctor()
  instance()Lorg/linphone/mediastream/AACFilter; = Instance()
  postprocess()Z = Postprocess()
  preprocess(IIIZ)Z = Preprocess(int, int, int, bool)
  pullFromDecoder([B)I = PullFromDecoder(byte[])
  pullFromEncoder([B)I = PullFromEncoder(byte[])
  pushToDecoder([BI)Z = PushToDecoder(byte[], int)
  pushToEncoder([BI)Z = PushToEncoder(byte[], int)
org/linphone/mediastream/Factory = Org.Linphone.Mediastream.Factory
  enableFilterFromName(Ljava/lang/String;Z)V = EnableFilterFromName(string, bool)
  filterFromNameEnabled(Ljava/lang/String;)Z = FilterFromNameEnabled(string)
  getDecoderText(Ljava/lang/String;)Ljava/lang/String; = GetDecoderText(string)
  getEncoderText(Ljava/lang/String;)Ljava/lang/String; = GetEncoderText(string)
  setDeviceInfo(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;III)V = SetDeviceInfo(string, string, string, int, int, int)
org/linphone/mediastream/Log = Org.Linphone.Mediastream.Log
  <init>(Ljava/lang/String;Z)V = .ctor(string, bool)
  d([Ljava/lang/Object;)V = D(params Java.Lang.Object[])
  e([Ljava/lang/Object;)V = E(params Java.Lang.Object[])
  i([Ljava/lang/Object;)V = I(params Java.Lang.Object[])
  w([Ljava/lang/Object;)V = W(params Java.Lang.Object[])
org/linphone/mediastream/MediastreamerAndroidContext = Org.Linphone.Mediastream.MediastreamerAndroidContext
  DEVICE_HAS_BUILTIN_AEC = DeviceHasBuiltinAec
  DEVICE_HAS_BUILTIN_AEC_CRAPPY = DeviceHasBuiltinAecCrappy
  DEVICE_HAS_BUILTIN_OPENSLES_AEC = DeviceHasBuiltinOpenslesAec
  DEVICE_USE_ANDROID_MIC = DeviceUseAndroidMic
  getContext()Landroid/content/Context; = Context
  enableFilterFromName(Ljava/lang/String;Z)V = EnableFilterFromName(string, bool)
  filterFromNameEnabled(Ljava/lang/String;)Z = FilterFromNameEnabled(string)
  setContext(Ljava/lang/Object;)V = SetContext(Java.Lang.Object)
org/linphone/mediastream/MediastreamException = Org.Linphone.Mediastream.MediastreamException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/linphone/mediastream/Version = Org.Linphone.Mediastream.Version
  <init>()V = .ctor()
  API03_CUPCAKE_15 = Api03Cupcake15
  API04_DONUT_16 = Api04Donut16
  API05_ECLAIR_20 = Api05Eclair20
  API06_ECLAIR_201 = Api06Eclair201
  API07_ECLAIR_21 = Api07Eclair21
  API08_FROYO_22 = Api08Froyo22
  API09_GINGERBREAD_23 = Api09Gingerbread23
  API10_GINGERBREAD_MR1_233 = Api10GingerbreadMr1233
  API11_HONEYCOMB_30 = Api11Honeycomb30
  API12_HONEYCOMB_MR1_31X = Api12HoneycombMr131x
  API13_HONEYCOMB_MR2_32 = Api13HoneycombMr232
  API14_ICE_CREAM_SANDWICH_40 = Api14IceCreamSandwich40
  API15_ICE_CREAM_SANDWICH_403 = Api15IceCreamSandwich403
  API16_JELLY_BEAN_41 = Api16JellyBean41
  API17_JELLY_BEAN_42 = Api17JellyBean42
  API18_JELLY_BEAN_43 = Api18JellyBean43
  API19_KITKAT_44 = Api19Kitkat44
  API21_LOLLIPOP_50 = Api21Lollipop50
  API22_LOLLIPOP_51 = Api22Lollipop51
  API23_MARSHMALLOW_60 = Api23Marshmallow60
  API24_NOUGAT_70 = Api24Nougat70
  API25_NOUGAT_71 = Api25Nougat71
  API26_O_80 = Api26O80
  getCpuAbis()Ljava/util/List; = CpuAbis
  hasFastCpu()Z = HasFastCpu
  hasFastCpuWithAsmOptim()Z = HasFastCpuWithAsmOptim
  hasNeon()Z = HasNeon
  hasZrtp()Z = HasZrtp
  isHDVideoCapable()Z = IsHDVideoCapable
  isVideoCapable()Z = IsVideoCapable
  dumpCapabilities()V = DumpCapabilities()
  isXLargeScreen(Landroid/content/Context;)Z = IsXLargeScreen(Android.Content.Context)
  sdk()I = Sdk()
  sdkAboveOrEqual(I)Z = SdkAboveOrEqual(int)
  sdkStrictlyBelow(I)Z = SdkStrictlyBelow(int)
org/linphone/mediastream/video/AndroidVideoWindowImpl = Org.Linphone.Mediastream.Video.AndroidVideoWindowImpl
  <init>(Landroid/view/SurfaceView;Landroid/view/SurfaceView;)V = .ctor(Android.Views.SurfaceView, Android.Views.SurfaceView)
  <init>(Landroid/view/SurfaceView;Landroid/view/SurfaceView;Lorg/linphone/mediastream/video/AndroidVideoWindowImpl$VideoWindowListener;)V = .ctor(Android.Views.SurfaceView, Android.Views.SurfaceView, Org.Linphone.Mediastream.Video.AndroidVideoWindowImpl.IVideoWindowListener)
  getBitmap()Landroid/graphics/Bitmap; = Bitmap
  getSurface()Landroid/view/Surface; = Surface
  init()V = Init()
  release()V = Release()
  requestRender()V = RequestRender()
  rotationToAngle(I)I = RotationToAngle(int)
  setListener(Lorg/linphone/mediastream/video/AndroidVideoWindowImpl$VideoWindowListener;)V = SetListener(Org.Linphone.Mediastream.Video.AndroidVideoWindowImpl.IVideoWindowListener)
  setOpenGLESDisplay(J)V = SetOpenGLESDisplay(long)
  update()V = Update()
org/linphone/mediastream/video/capture/AndroidVideoApi5JniWrapper = Org.Linphone.Mediastream.Video.Capture.AndroidVideoApi5JniWrapper
  <init>()V = .ctor()
  isRecording = IsRecording
  activateAutoFocus(Ljava/lang/Object;)V = ActivateAutoFocus(Java.Lang.Object)
  applyCameraParameters(Landroid/hardware/Camera;III)V = ApplyCameraParameters(Android.Hardware.Camera, int, int, int)
  detectCameras([I[I[I)I = DetectCameras(int[], int[], int[])
  putImage(J[B)V = PutImage(long, byte[])
  selectNearestResolutionAvailable(III)[I = SelectNearestResolutionAvailable(int, int, int)
  selectNearestResolutionAvailableForCamera(III)[I = SelectNearestResolutionAvailableForCamera(int, int, int)
  setPreviewDisplaySurface(Ljava/lang/Object;Ljava/lang/Object;)V = SetPreviewDisplaySurface(Java.Lang.Object, Java.Lang.Object)
  startRecording(IIIIIJ)Ljava/lang/Object; = StartRecording(int, int, int, int, int, long)
  stopRecording(Ljava/lang/Object;)V = StopRecording(Java.Lang.Object)
org/linphone/mediastream/video/capture/AndroidVideoApi8JniWrapper = Org.Linphone.Mediastream.Video.Capture.AndroidVideoApi8JniWrapper
  <init>()V = .ctor()
  detectCameras([I[I[I)I = DetectCameras(int[], int[], int[])
  selectNearestResolutionAvailable(III)[I = SelectNearestResolutionAvailable(int, int, int)
  setPreviewDisplaySurface(Ljava/lang/Object;Ljava/lang/Object;)V = SetPreviewDisplaySurface(Java.Lang.Object, Java.Lang.Object)
  startRecording(IIIIIJ)Ljava/lang/Object; = StartRecording(int, int, int, int, int, long)
  stopRecording(Ljava/lang/Object;)V = StopRecording(Java.Lang.Object)
org/linphone/mediastream/video/capture/AndroidVideoApi9JniWrapper = Org.Linphone.Mediastream.Video.Capture.AndroidVideoApi9JniWrapper
  <init>()V = .ctor()
  detectCameras([I[I[I)I = DetectCameras(int[], int[], int[])
  selectNearestResolutionAvailable(III)[I = SelectNearestResolutionAvailable(int, int, int)
  setPreviewDisplaySurface(Ljava/lang/Object;Ljava/lang/Object;)V = SetPreviewDisplaySurface(Java.Lang.Object, Java.Lang.Object)
  startRecording(IIIIIJ)Ljava/lang/Object; = StartRecording(int, int, int, int, int, long)
  stopRecording(Ljava/lang/Object;)V = StopRecording(Java.Lang.Object)
org/linphone/mediastream/video/capture/hwconf/AndroidCameraConfiguration = Org.Linphone.Mediastream.Video.Capture.Hwconf.AndroidCameraConfiguration
  <init>()V = .ctor()
  hasFrontCamera()Z = HasFrontCamera
  hasSeveralCameras()Z = HasSeveralCameras
  retrieveCameras()[Lorg/linphone/mediastream/video/capture/hwconf/AndroidCameraConfiguration$AndroidCamera; = RetrieveCameras()
org/linphone/mediastream/video/capture/hwconf/AndroidCameraConfigurationReader21 = Org.Linphone.Mediastream.Video.Capture.Hwconf.AndroidCameraConfigurationReader21
  <init>()V = .ctor()
  probeCameras()[Lorg/linphone/mediastream/video/capture/hwconf/AndroidCameraConfiguration$AndroidCamera; = ProbeCameras()
org/linphone/mediastream/video/capture/hwconf/Hacks = Org.Linphone.Mediastream.Video.Capture.Hwconf.Hacks
  hasBuiltInEchoCanceller()Z = HasBuiltInEchoCanceller
  hasCamera()Z = HasCamera
  hasTwoCamerasRear0Front1()Z = HasTwoCamerasRear0Front1
  isGalaxySOrTab()Z = IsGalaxySOrTab
  isGalaxySOrTabWithFrontCamera()Z = IsGalaxySOrTabWithFrontCamera
  isGalaxyTab()Z = IsGalaxyTab
  needGalaxySAudioHack()Z = NeedGalaxySAudioHack()
  needPausingCallForSpeakers()Z = NeedPausingCallForSpeakers()
  needSoftvolume()Z = NeedSoftvolume()
  sleep(I)V = Sleep(int)
org/linphone/mediastream/video/display/GL2JNIView = Org.Linphone.Mediastream.Video.Display.GL2JNIView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;ZII)V = .ctor(Android.Content.Context, bool, int, int)
org/linphone/mediastream/video/display/OpenGLESDisplay = Org.Linphone.Mediastream.Video.Display.OpenGLESDisplay
  <init>()V = .ctor()
  init(JII)V = Init(long, int, int)
  render(J)V = Render(long)
org/linphone/tools/H264Helper = Org.Linphone.Tools.H264Helper
  <init>()V = .ctor()
  MODE_AUTO = ModeAuto
  MODE_MEDIA_CODEC = ModeMediaCodec
  MODE_OPENH264 = ModeOpenh264
org/linphone/tools/Lpc2Xml = Org.Linphone.Tools.Lpc2Xml
  <init>()V = .ctor()
  convertFile(Ljava/lang/String;)I = ConvertFile(string)
  convertString(Ljava/lang/StringBuffer;)I = ConvertString(Java.Lang.StringBuffer)
  finalize()V = Finalize()
  printLog(ILjava/lang/String;)V = PrintLog(int, string)
org/linphone/tools/OpenH264DownloadHelper = Org.Linphone.Tools.OpenH264DownloadHelper
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getFullPathLib()Ljava/lang/String; = FullPathLib
  isCodecFound()Z = IsCodecFound
  getLicenseMessage()Ljava/lang/String; = LicenseMessage
  getNameLib()Ljava/lang/String; = NameLib
  setNameLib(Ljava/lang/String;)V = NameLib
  getUserDataSize()I = UserDataSize
  downloadCodec()V = DownloadCodec()
  getUserData(I)Ljava/lang/Object; = GetUserData(int)
  setNameFileDownload(Ljava/lang/String;)V = SetNameFileDownload(string)
  setUrlDownload(Ljava/lang/String;)V = SetUrlDownload(string)
  setUserData(ILjava/lang/Object;)V = SetUserData(int, Java.Lang.Object)
  setUserData(Ljava/lang/Object;)I = SetUserData(Java.Lang.Object)
org/linphone/tools/Xml2Lpc = Org.Linphone.Tools.Xml2Lpc
  <init>()V = .ctor()
  isAvailable()Z = IsAvailable
  finalize()V = Finalize()
  printLog(ILjava/lang/String;)V = PrintLog(int, string)
  setXmlFile(Ljava/lang/String;)I = SetXmlFile(string)
  setXmlString(Ljava/lang/String;)I = SetXmlString(string)
  setXsdFile(Ljava/lang/String;)I = SetXsdFile(string)
  setXsdString(Ljava/lang/String;)I = SetXsdString(string)
  validate()I = Validate()
