using System; using System.IO; using Foundation; using Linphone; using UIKit; using AudioToolbox; using System.Threading; using AVFoundation; using Plugin.Toasts; using UserNotifications; using ImageCircle.Forms.Plugin.iOS; using System.Threading.Tasks; using Xamarin.Forms; using LinphoneXamarin.Entities; using LinphoneXamarin.Util; using CoreFoundation; using PushKit; using CallKit; using LinphoneXamarin.Services; using LinphoneXamarin.MyCallKit; using CoreBluetooth; using SystemConfiguration; using Firebase.CloudMessaging; using System.Text;
using Xamarin;

namespace LinphoneXamarin {     // The UIApplicationDelegate for the application. This class is responsible for launching the      // User Interface of the application, as well as listening (and optionally responding) to      // application events from iOS.     [Register("AppDelegate")]     public partial class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate,IPKPushRegistryDelegate, IUNUserNotificationCenterDelegate, IMessagingDelegate     {         public string Filepath { get; private set; }                 NetworkReachability networkReachability;         private Core LinphoneCore         {             get             {                 return ((App)App.Current).LinphoneCore;             }         }          private CXCallObserver callObserver;              private CBCentralManager bluetoothManager;         //         // This method is invoked when the application has loaded and is ready to run. In this          // method you should instantiate the window, load the UI into it and then make the window         // visible.         //         // You have 17 seconds to return from this method, or iOS will terminate your application.         //          #region Constructors         public override UIWindow Window { get; set; }                 public ProviderDelegate CallProviderDelegate { get; set; }         #endregion          public override bool FinishedLaunching(UIApplication app, NSDictionary options)         {             global::Xamarin.Forms.Forms.Init();             IQKeyboardManager.SharedManager.Enable = true;             ImageCircleRenderer.Init();             DependencyService.Register<ToastNotification>();             ToastNotification.Init();                         LoadApplication(new App());             Firebase.Core.App.Configure();             messageSettings();             //Plugin.FirebasePushNotification.FirebasePushNotificationManager.Initialize(options, true);            var linphoneCore = LinphoneBase.Instance.linphoneCore;             linphoneCore.Ringback = getFileUri("ringback.wav");             linphoneCore.SetCallErrorTone(Reason.Declined,getFileUri("ringback.wav"));             linphoneCore.RootCa = getFileUri("rootca.pem");             RegisterVoip();             callObserver = new CXCallObserver();                        bluetoothManager = new CBCentralManager(new CbCentralDelegate(), DispatchQueue.DefaultGlobalQueue,                                                     new CBCentralInitOptions {  ShowPowerAlert= true, });                     NSError error;             AVAudioSession.SharedInstance().SetMode(new NSString("voiceChat"), out error);             AVAudioSession.SharedInstance().SetCategory(AVAudioSessionCategory.PlayAndRecord);             AudioSession.AudioRouteChanged += this.routehandler;                         SharedData.Instance.launchAction = LaunchAction.DEFAULT;          // Initialize the call handlers              CallProviderDelegate = ProviderDelegate.Instance;             networkReachability = new NetworkReachability("www.google.com");             networkReachability.SetNotification(OnNetworkChange);             networkReachability.Schedule(CFRunLoop.Current, CFRunLoop.ModeDefault);             NetworkReachabilityFlags flags;             if (!isRemotNotificationAllow())                 showNotificationDialog();              TimeHelper.Instance.is24hoursFormat = CheckIsTwelveTimeFormat();                         return base.FinishedLaunching(app, options);         }          private bool CheckIsTwelveTimeFormat()         {             var dateFormatter = new NSDateFormatter();             dateFormatter.DateStyle = NSDateFormatterStyle.None;             dateFormatter.TimeStyle = NSDateFormatterStyle.Short;              var dateString = dateFormatter.ToString(NSDate.Now);             var isTwelveHourFormat =             dateString.Contains(dateFormatter.AMSymbol) ||             dateString.Contains(dateFormatter.PMSymbol);             return isTwelveHourFormat;         }           void CBCentralManager_UpdatedState(object sender, EventArgs e)         {             Console.WriteLine("omer654: CBCentralManager_UpdatedState ");         }                  public void DidReceiveIncomingPush(PKPushRegistry registry, PKPushPayload payload, string type)         {             try             {                 var aps = payload.DictionaryPayload.ObjectForKey(new NSString("aps")) as NSDictionary;                 addLog("DidReceiveIncomingPush ");                 addLog("isIOSForground() " + SharedData.Instance.isIOSForground);                                 if (!SharedData.Instance.isIOSForground && aps != null)                 {                     SharedData.Instance.launchAction = LaunchAction.INCOMING_CALL;
                    var alertKey = new NSString("alert");                     var title = new NSString("title");                     var a = aps.ObjectForKey(alertKey) as NSDictionary;                     var b = a.ObjectForKey(title);                     ProviderDelegate.Instance.ReportIncomingCall(b.ToString(),false);                 }             }catch(Exception err){                 addLog(err.ToString());             }                     }          void RegisterVoip()         {             var mainQueue = DispatchQueue.MainQueue;             var voipRegistry = new PKPushRegistry(mainQueue);             voipRegistry.Delegate = this;             voipRegistry.DesiredPushTypes = new NSSet(new string[] { PKPushType.Voip});         }          private void showNotificationDialog()         {              new UIAlertView("", "To receive calls in Atouch, you must enable Settings -> Notifications -> Aeonix -> Allow Notifications.", null, "Ok", null).Show();                              }          private bool isRemotNotificationAllow(){             UIUserNotificationType types = UIApplication.SharedApplication.CurrentUserNotificationSettings.Types;                          if (types == UIUserNotificationType.None)                 return false;             return true;         }          private void messageSettings(){
            addLog("messageSettings()");            
             
                var authOptions = UNAuthorizationOptions.Alert | UNAuthorizationOptions.Badge | UNAuthorizationOptions.Sound;
                UNUserNotificationCenter.Current.RequestAuthorization(authOptions, (granted, error) => {
                    addLog( "isGranted: "+ granted+" ,error: "+error);
                });

                // For iOS 10 display notification (sent via APNS)
                UNUserNotificationCenter.Current.Delegate = this;

            UIApplication.SharedApplication.RegisterForRemoteNotifications();
        }          public static string getFileUri(string fileName)         {             string FilePath = NSBundle.MainBundle.PathForResource(Path.GetFileNameWithoutExtension(fileName),                                     Path.GetExtension(fileName));              return FilePath;         }          public override void OnActivated(UIApplication application)         {             base.OnActivated(application);             addLog("OnActivated()");             SharedData.Instance.isIOSForground = true;                       clearNotification();          }         public override void WillEnterForeground(UIApplication application)         {             base.WillEnterForeground(application);             addLog("WillEnterForeground()");         }          public override void OnResignActivation(UIApplication application)         {             addLog("OnResignActivation()");                           base.OnResignActivation(application);             //if (ProviderDelegate.Instance.activeCall == null && callObserver.Calls != null && callObserver.Calls.Length > 0)             //{             //    Console.WriteLine("omer50: OnResignActivation " + callObserver.Calls.Length);             //    LinphoneXamarin.Services.CallService.Instance.toggleHold();             //}                     }          public override void DidEnterBackground(UIApplication application)         {             addLog("DidEnterBackground()");           base.DidEnterBackground(application);             SharedData.Instance.isIOSForground = false;             if (LinphoneBase.Instance.linphoneCore.CallsNb == 0)             {                 addLog("App will destroy");                Thread.CurrentThread.Abort();                 }          }          private void addLog(string message)         {             MyFileSystem.Instance.writeDebug(message, "AppDelegate");             Console.WriteLine($"omer928: { message}");         }          // not guaranteed that this will run         public override void WillTerminate(UIApplication application)         {             addLog("WillTerminate()");                         base.WillTerminate(application);         }                         private void clearNotification(){             new Task(() =>             {                 UNUserNotificationCenter.Current.RemoveAllDeliveredNotifications();             }).Start();         }           public void DidUpdatePushCredentials(PKPushRegistry registry, PKPushCredentials credentials, string type)         {             if (credentials != null && credentials.Token != null && UIApplication.SharedApplication.ApplicationState != UIApplicationState.Background)             {                  var DeviceToken = ByteToHex(credentials.Token.ToArray());                 //var fullToken = credentials.Token.ToString();                 //var token = fullToken.Trim('<').Trim('>');                  addLog("DidUpdatePushCredentials() voiptoken is: " + DeviceToken);                 LinphoneXamarin.Util.MyFileSystem.Instance.saveVoipPush(DeviceToken.Replace(" ", ""));              }         }          public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)         {             // Get current device token             // var DeviceToken = ByteToHex(deviceToken.ToArray());
            Messaging.SharedInstance.ApnsToken = deviceToken;                          //var DeviceToken = deviceToken.Description;             addLog("RegisteredForRemoteNotifications() fcmtoken is: "+ Messaging.SharedInstance.FcmToken);                       MyFileSystem.Instance.saveFcmToken(Messaging.SharedInstance.FcmToken);

        }          public string ByteToHex(byte[] data)
        {
            StringBuilder sb = new StringBuilder(data.Length * 2);
            foreach (byte b in data)
            {
                sb.AppendFormat("{0:x2}", b);
            }
            return sb.ToString();
        }          public override void FailedToRegisterForRemoteNotifications(UIApplication application, NSError error)         {             //FirebasePushNotificationManager.RemoteNotificationRegistrationFailed(error);             addLog("FailedToRegisterForRemoteNotifications: ");         }          // To receive notifications in foregroung on iOS 9 and below.         // To receive notifications in background in any iOS version         public override void DidReceiveRemoteNotification(UIApplication application, NSDictionary userInfo, Action<UIBackgroundFetchResult> completionHandler)         {
            // If you are receiving a notification message while your app is in the background,
            // this callback will not be fired 'till the user taps on the notification launching the application.

            // If you disable method swizzling, you'll need to call this method. 
            // This lets FCM track message delivery and analytics, which is performed
            // automatically with method swizzling enabled.
            // Do your magic to handle the notification data
            addLog("DidReceiveRemoteNotification()");            
            //Plugin.FirebasePushNotification.FirebasePushNotificationManager.DidReceiveMessage(userInfo);

        }                  public override bool OpenUrl(UIApplication app, NSUrl url, NSDictionary options)         {             // Get handle from url             var handle = StartCallRequest.CallHandleFromURL(url);              // Found?             if (handle == null)             {                 // No, report to system                 Console.WriteLine("Unable to get call handle from URL: {0}", url);                 return false;             }             else             {                 // Yes, start call and inform system                 CallProviderDelegate.CallManager.StartCall(handle);                 return true;             }         }            public override bool ContinueUserActivity(UIApplication application, NSUserActivity userActivity, UIApplicationRestorationHandler completionHandler)         {                         var handle = StartCallRequest.CallHandleFromActivity(userActivity);              // Found?             if (handle == null)             {                 // No, report to system                 Console.WriteLine("Unable to get call handle from User Activity: {0}", userActivity);                 return false;             }             else             {                 // Yes, start call and inform system                 CallProviderDelegate.CallManager.StartCall(handle);                 return true;             }         }         public static void screenHandler(bool isShoulBeOn){             Console.WriteLine("screenHandler: "+isShoulBeOn);              UIApplication.SharedApplication.IdleTimerDisabled = isShoulBeOn;         }                 public static void destroyApp()         {             Thread.CurrentThread.Abort();          }          public static void startProximity(){             UIDevice.CurrentDevice.ProximityMonitoringEnabled = true;          }           public static void stopProximity(){             UIDevice.CurrentDevice.ProximityMonitoringEnabled = false;         }        public static void turnOnBTIntent()         {            var bluetoothManager = new CoreBluetooth.CBCentralManager();             // Does not go directly to bluetooth on every OS version though, but opens the Settings on most              UIApplication.SharedApplication.OpenUrl(new NSUrl("App-Prefs:root=Bluetooth"));             if (CoreLocation.CLLocationManager.LocationServicesEnabled == false)                 UIApplication.SharedApplication.OpenUrl(new NSUrl("App-Prefs:root=LOCATION"));         }             public static void setAudioRoute(MYAudioState mYAudioState)         {             NSError error;           AVAudioSessionPortDescription[] x = AVAudioSession.SharedInstance().AvailableInputs;             Console.WriteLine("omer654: setAudioRoute(): " + mYAudioState);                          switch (mYAudioState)             {                 case MYAudioState.HEARPEACE:                     foreach (var i in x)                     {                         if (i.PortType == "MicrophoneBuiltIn")                             AVAudioSession.SharedInstance().SetPreferredInput(i, out error);                     }                     break;                 case MYAudioState.SPEAKER:                     AVAudioSession.SharedInstance().OverrideOutputAudioPort(AVAudioSessionPortOverride.Speaker, out error);                     break;                                  default:                     AVAudioSession.SharedInstance().OverrideOutputAudioPort(AVAudioSessionPortOverride.None, out error);                     break;                      }             MyAudioManager.Instance.onAudioStateChanged(getAudioState());          }          void routehandler(object sender, AudioSessionRouteChangeEventArgs e)         {             Console.WriteLine("omer654: routehandler " + e.Reason.ToString());                        switch (e.Reason)             {                 case AudioSessionRouteChangeReason.NewDeviceAvailable:                 case AudioSessionRouteChangeReason.OldDeviceUnavailable:                     setAudioRoute(MYAudioState.DEFAULT);                     break;                 case AudioSessionRouteChangeReason.Override:                 case AudioSessionRouteChangeReason.CategoryChange:                 case AudioSessionRouteChangeReason.RouteConfigurationChange:                  MyAudioManager.Instance.onAudioStateChanged(getAudioState());                     break;             }         }                public static MYAudioState getAudioState()         {              var session = AVAudioSession.SharedInstance();             if (session != null && session.CurrentRoute != null && session.CurrentRoute.Outputs != null)             {                  foreach (var i in session.CurrentRoute.Outputs)                 {                     Console.WriteLine("omer654:getAudioState() PortType: " + i.PortType);                     switch (i.PortType)                     {                         case "Speaker":                             return MYAudioState.SPEAKER;                         case "Receiver":                             return MYAudioState.HEARPEACE;                         default:                             return MYAudioState.BT;                      }                 }              }             return MYAudioState.DEFAULT;         }                     public static bool isBtEnabled(){             NSError error;             AVAudioSession.SharedInstance().OverrideOutputAudioPort(AVAudioSessionPortOverride.None, out error);             bool headphonesConnected = false;             var session = AVAudioSession.SharedInstance();             if (session != null && session.CurrentRoute != null && session.CurrentRoute.Outputs != null)             {                  foreach (var i in session.CurrentRoute.Outputs)                 {                     Console.WriteLine("omer654:isBtEnabled() PortType: " + i.PortType);                     if (i.PortType.ToString().IndexOf("Bluetooth") > -1)                     {                         headphonesConnected = true;                     }                     //if (i.PortType == "BluetoothA2DPOutput" || i.PortType == "BluetoothHFP")                     //{                     //    headphonesConnected = true;                     //}                 }             }             Console.WriteLine("omer654:isBtEnabled(): " + headphonesConnected);             return headphonesConnected;             }                                    void OnNetworkChange(NetworkReachabilityFlags flags)         {             addLog("OnNetworkChange: flag :"+flags);              if(LoginService.Instance.registrationProcess.CurrentState== MyRegistrationState.AfterAeonix && LinphoneCore.IsNetworkReachable && LinphoneCore.CallsNb==0){                 addLog("OnNetworkChange, flag: "+flags.ToString()+", action : making new registration");                 LoginService.Instance.resetLoginProccesss();                  new Task(() =>                 {                      Thread.Sleep(30000);                     if (LoginService.Instance.registrationProcess.CurrentState != MyRegistrationState.AfterAeonix)                     {                         addLog("OnNetworkChange, flag: " + flags.ToString() + ", action : making new registration again");                         LoginService.Instance.resetLoginProccesss();                     }                 }).Start();              }          }          public class CbCentralDelegate : CBCentralManagerDelegate         {             public override void UpdatedState(CBCentralManager central)             {                 Console.WriteLine("omer654: BTUpdatedState " + central.State);                             }              public override void ConnectedPeripheral(CBCentralManager central, CBPeripheral peripheral)             {                 Console.WriteLine("omer654: ConnectedPeripheral ");              }              public override void DisconnectedPeripheral(CBCentralManager central, CBPeripheral peripheral, NSError error)             {                 Console.WriteLine("omer654: DisconnectedPeripheral ");              }                  }     } }  